
atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059f  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d0  00000000  00000000  000006fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000243  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001199  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	24 c0       	rjmp	.+72     	; 0x76 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0b00111110;
  30:	8e e3       	ldi	r24, 0x3E	; 62
  32:	87 bb       	out	0x17, r24	; 23

	PORTB = 0b11110000;
  34:	80 ef       	ldi	r24, 0xF0	; 240
  36:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  38:	2f e3       	ldi	r18, 0x3F	; 63
  3a:	3d e0       	ldi	r19, 0x0D	; 13
  3c:	83 e0       	ldi	r24, 0x03	; 3
  3e:	21 50       	subi	r18, 0x01	; 1
  40:	30 40       	sbci	r19, 0x00	; 0
  42:	80 40       	sbci	r24, 0x00	; 0
  44:	e1 f7       	brne	.-8      	; 0x3e <__SP_H__>
  46:	00 c0       	rjmp	.+0      	; 0x48 <__SREG__+0x9>
  48:	00 00       	nop
	
	_delay_ms(1000);
    /* Replace with your application code */
    while (1) 
    {
			PORTB = 0b11111111;
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	88 bb       	out	0x18, r24	; 24
  4e:	9f e3       	ldi	r25, 0x3F	; 63
  50:	2d e0       	ldi	r18, 0x0D	; 13
  52:	33 e0       	ldi	r19, 0x03	; 3
  54:	91 50       	subi	r25, 0x01	; 1
  56:	20 40       	sbci	r18, 0x00	; 0
  58:	30 40       	sbci	r19, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <__SREG__+0x15>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__SREG__+0x1f>
  5e:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0b00000000;
  60:	18 ba       	out	0x18, r1	; 24
  62:	9f e3       	ldi	r25, 0x3F	; 63
  64:	2d e0       	ldi	r18, 0x0D	; 13
  66:	33 e0       	ldi	r19, 0x03	; 3
  68:	91 50       	subi	r25, 0x01	; 1
  6a:	20 40       	sbci	r18, 0x00	; 0
  6c:	30 40       	sbci	r19, 0x00	; 0
  6e:	e1 f7       	brne	.-8      	; 0x68 <__SREG__+0x29>
  70:	00 c0       	rjmp	.+0      	; 0x72 <__SREG__+0x33>
  72:	00 00       	nop
  74:	eb cf       	rjmp	.-42     	; 0x4c <__SREG__+0xd>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
