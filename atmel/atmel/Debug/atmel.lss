
atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067e  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054b  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000275  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b6  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	0f d0       	rcall	.+30     	; 0x4a <main>
  2c:	2f c0       	rjmp	.+94     	; 0x8c <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <ReadADC>:
	//        ||||MUX3        - таблица 2
	//        |||||MUX2       - таблица 2
	//        ||||||MUX1      - таблица 2
	//        |||||||MUX0     - таблица 2
	//        ||||||||
	ADMUX = 0b00100000 | (src & 0b00001111);
  30:	8f 70       	andi	r24, 0x0F	; 15
  32:	80 62       	ori	r24, 0x20	; 32
  34:	87 b9       	out	0x07, r24	; 7
	//         ||||ADIE       - разрешение прерывания от компаратора
	//         |||||ADPS2     - настройка пределителя (влияет на время измерения)
	//         ||||||ADPS1    -
	//         |||||||ADPS0   -
	//         ||||||||
	ADCSRA = 0b10000111;
  36:	87 e8       	ldi	r24, 0x87	; 135
  38:	86 b9       	out	0x06, r24	; 6
}
	
int ReadADC(int number_of_port){
	SetupADMUX(number_of_port);
	SetupADCSRA();
	ADCSRA |= (1 << ADSC);          // начали измерение
  3a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));    // ждем когда помереет
  3c:	36 99       	sbic	0x06, 6	; 6
  3e:	fe cf       	rjmp	.-4      	; 0x3c <ReadADC+0xc>
	int result = ADCH;              // отбросили шумные незначащие биты
  40:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = 0b00000111;            // выключили АЦП
  42:	97 e0       	ldi	r25, 0x07	; 7
  44:	96 b9       	out	0x06, r25	; 6
	return result;
}
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	08 95       	ret

0000004a <main>:
  //         ||||DDB3       - PB3
  //         |||||DDB2      - PB2
  //         ||||||DDB1     - PB1
  //         |||||||DDB0    - PB0
  //         ||||||||
	DDRB = 0b00111010;
  4a:	8a e3       	ldi	r24, 0x3A	; 58
  4c:	87 bb       	out	0x17, r24	; 23
	//        ||||WDE         - включение watchdog
	//        |||||WDP2       - таблица 1
	//        ||||||WDP1      - таблица 1
	//        |||||||WDP0     - таблица 1
	//        ||||||||
	WDTCR = 0b00001111;
  4e:	8f e0       	ldi	r24, 0x0F	; 15
  50:	81 bd       	out	0x21, r24	; 33
	//        ||||SM0           - таблица 1
	//        |||||BODSE        - не поддерживается (0 по умолчанию)
	//        ||||||ISC01       - что-то связанное с прерываниями (к делу не относится)
	//        |||||||ISC00      - что-то связанное с прерываниями (к делу не относится)
	//        ||||||||
	MCUCR = 0b00010000;
  52:	c0 e1       	ldi	r28, 0x10	; 16
  54:	c5 bf       	out	0x35, r28	; 53
int main(void)
{
	SetupPins();
	SetupWatchdog();
	SetupSleep();
	ReadADC(1);
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	ea df       	rcall	.-44     	; 0x30 <ReadADC>
	//  вся вспомогательная информация в SetupSleep
	MCUCR |= (1 << SE);
}

inline void blink(){
	PORTB = 0b00010000;
  5c:	c8 bb       	out	0x18, r28	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	2f e3       	ldi	r18, 0x3F	; 63
  60:	8d e0       	ldi	r24, 0x0D	; 13
  62:	93 e0       	ldi	r25, 0x03	; 3
  64:	21 50       	subi	r18, 0x01	; 1
  66:	80 40       	sbci	r24, 0x00	; 0
  68:	90 40       	sbci	r25, 0x00	; 0
  6a:	e1 f7       	brne	.-8      	; 0x64 <main+0x1a>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <main+0x24>
  6e:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0b00000000;
  70:	18 ba       	out	0x18, r1	; 24
  72:	2f e3       	ldi	r18, 0x3F	; 63
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	93 e0       	ldi	r25, 0x03	; 3
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <main+0x2e>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x38>
  82:	00 00       	nop
	MCUCR = 0b00010000;
}

inline void Sleep(){
	//  вся вспомогательная информация в SetupSleep
	MCUCR |= (1 << SE);
  84:	85 b7       	in	r24, 0x35	; 53
  86:	80 62       	ori	r24, 0x20	; 32
  88:	85 bf       	out	0x35, r24	; 53
  8a:	fc cf       	rjmp	.-8      	; 0x84 <main+0x3a>

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
