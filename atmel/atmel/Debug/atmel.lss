
atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005df  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d3  00000000  00000000  0000074f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	2f c0       	rjmp	.+94     	; 0x8c <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
  //         ||||DDB3       - PB3
  //         |||||DDB2      - PB2
  //         ||||||DDB1     - PB1
  //         |||||||DDB0    - PB0
  //         ||||||||
	DDRB = 0b00111010;
  30:	8a e3       	ldi	r24, 0x3A	; 58
  32:	87 bb       	out	0x17, r24	; 23
	//          ||||||WDP1      - таблица 1
	//          |||||||WDP0     - таблица 1
	//          ||||||||
	//WDTCR = 0b00000000;
	
	WDTCR |= (0 << WDIE);
  34:	81 b5       	in	r24, 0x21	; 33
  36:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1 << WDE);
  38:	81 b5       	in	r24, 0x21	; 33
  3a:	88 60       	ori	r24, 0x08	; 8
  3c:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1 << WDP3);
  3e:	81 b5       	in	r24, 0x21	; 33
  40:	80 62       	ori	r24, 0x20	; 32
  42:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (0 << WDP2);
  44:	81 b5       	in	r24, 0x21	; 33
  46:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (0 << WDP1);
  48:	81 b5       	in	r24, 0x21	; 33
  4a:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (0 << WDP0);
  4c:	81 b5       	in	r24, 0x21	; 33
  4e:	81 bd       	out	0x21, r24	; 33
	//          |||||BODSE        - не поддерживается (0 по умолчанию)
	//          ||||||ISC01       - что-то связанное с прерываниями (к делу не относится)
	//          |||||||ISC00      - что-то связанное с прерываниями (к делу не относится)
	//          ||||||||
	//MCUCR = 0b00000000;
	MCUCR |= (1 << SM1);
  50:	85 b7       	in	r24, 0x35	; 53
  52:	80 61       	ori	r24, 0x10	; 16
  54:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (0 << SM0);
  56:	85 b7       	in	r24, 0x35	; 53
  58:	85 bf       	out	0x35, r24	; 53
	//  вся вспомогательная информация в SetupSleep
	MCUCR |= (1 << SE);
}

inline void blink(){
	PORTB = 0b00010000;
  5a:	80 e1       	ldi	r24, 0x10	; 16
  5c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	2f e3       	ldi	r18, 0x3F	; 63
  60:	8d e0       	ldi	r24, 0x0D	; 13
  62:	93 e0       	ldi	r25, 0x03	; 3
  64:	21 50       	subi	r18, 0x01	; 1
  66:	80 40       	sbci	r24, 0x00	; 0
  68:	90 40       	sbci	r25, 0x00	; 0
  6a:	e1 f7       	brne	.-8      	; 0x64 <__SREG__+0x25>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <__SREG__+0x2f>
  6e:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0b00000000;
  70:	18 ba       	out	0x18, r1	; 24
  72:	2f e3       	ldi	r18, 0x3F	; 63
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	93 e0       	ldi	r25, 0x03	; 3
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <__SREG__+0x39>
  80:	00 c0       	rjmp	.+0      	; 0x82 <__SREG__+0x43>
  82:	00 00       	nop
	MCUCR |= (0 << SM0);
}

inline void Sleep(){
	//  вся вспомогательная информация в SetupSleep
	MCUCR |= (1 << SE);
  84:	85 b7       	in	r24, 0x35	; 53
  86:	80 62       	ori	r24, 0x20	; 32
  88:	85 bf       	out	0x35, r24	; 53
  8a:	fc cf       	rjmp	.-8      	; 0x84 <__SREG__+0x45>

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
