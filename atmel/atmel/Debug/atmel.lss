
atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000134  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b3  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050f  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021b  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000351  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006f  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1e c0       	rjmp	.+60     	; 0x56 <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 ec       	ldi	r30, 0xC0	; 192
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 36       	cpi	r26, 0x62	; 98
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	19 d0       	rcall	.+50     	; 0x84 <main>
  52:	34 c0       	rjmp	.+104    	; 0xbc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_12>:
	PORTB = 0b00000000;
	_delay_ms(ms);
}


ISR (WDT_vect) {
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
	interruptFlug++;
  64:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  68:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
  72:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
}
  76:	9f 91       	pop	r25
  78:	8f 91       	pop	r24
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <main>:
	//       ||||DDB3       - PB3
	//       |||||DDB2      - PB2
	//       ||||||DDB1     - PB1
	//       |||||||DDB0    - PB0
	//       ||||||||
	DDRB = 0b00100111;
  84:	87 e2       	ldi	r24, 0x27	; 39
  86:	87 bb       	out	0x17, r24	; 23
	//        ||||WDE         - включение watchdog
	//        |||||WDP2       - таблица 1
	//        ||||||WDP1      - таблица 1
	//        |||||||WDP0     - таблица 1
	//        ||||||||
	WDTCR = 0b01110001;
  88:	81 e7       	ldi	r24, 0x71	; 113
  8a:	81 bd       	out	0x21, r24	; 33
	sei();
  8c:	78 94       	sei
int main(void)
{
	int realSurvey = sensorSurvey / 8;
	SetupPins();
	SetupWatchdog();
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	87 7e       	andi	r24, 0xE7	; 231
  92:	80 61       	ori	r24, 0x10	; 16
  94:	85 bf       	out	0x35, r24	; 53
	
	while (1) {
		if (interruptFlug >= realSurvey){
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  9a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	24 f4       	brge	.+8      	; 0xac <main+0x28>
			
			interruptFlug = 0;
  a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
  a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
		}
		sleep_mode();
  ac:	85 b7       	in	r24, 0x35	; 53
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	85 bf       	out	0x35, r24	; 53
  b2:	88 95       	sleep
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	85 bf       	out	0x35, r24	; 53
	}
  ba:	ed cf       	rjmp	.-38     	; 0x96 <main+0x12>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
